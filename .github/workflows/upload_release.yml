name: Upload the build when a new release is published

# To publish a new version, publish an empty release and this will populate it, and also upload to PyPi

on:
  release:
    types: 
      - created
      - edited # can use this to re-trigger in case it failed
  
  workflow_dispatch: # allows manual triggering of the workflow, mostly just for debugging/problem solving

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine sphinx build
      - name: Build whl and zip
        run: |
          python -m build
          mv dist/*.whl ./
          
          zip sphinx_autodocgen_${{ github.event.release.tag_name }}.zip *.whl README.rst LICENSE CHANGELOG.rst

      - name: Upload to GitHub Release
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1 # NB: no longer maintained
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: sphinx_autodocgen_${{ github.event.release.tag_name }}.zip
          asset_name: sphinx_autodocgen_${{ github.event.release.tag_name }}.zip
          asset_content_type: application/zip

      - name: Upload to PyPi
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          # Test repo:
          #twine upload --repository-url https://test.pypi.org/legacy/ *.whl
          
          # Real repo (be careful, must be final as releases cannot be deleted from here):
          twine upload *.whl
        